   CREATE TABLE insanlar
    (
        ssn CHAR(9),
        isim VARCHAR2(50),
        adres VARCHAR2(50)
    );
    INSERT INTO insanlar VALUES('123456789', 'Ali Can', 'Istanbul');
    INSERT INTO insanlar VALUES('234567890', 'Veli Cem', 'Ankara');
    INSERT INTO insanlar VALUES('345678901', 'Mine Bulut', 'Izmir');
    INSERT INTO insanlar (ssn, adres) VALUES('456789012', 'Bursa');
    INSERT INTO insanlar (ssn, adres) VALUES('567890123', 'Denizli');
    INSERT INTO insanlar (adres) VALUES('Sakarya');
    INSERT INTO insanlar (ssn) VALUES('999111222');
    
    select * from insanlar;
    
    select * from insanlar
    where isim IS NULL;
    
    UPDATE insanlar
    Set isim='NO NAME'
    WHERE isim IS NULL;
    
    
    select coalesce (isim,ssn,adres) from insanlar;
    drop table insanlar;
    
    
    --ornek tablodaki butun null verileri guzel birer cumlecikle degistirin
    UPDATE insanlar
    SET isim=COALESCE(isim,'henuz isim girilmedi'),
    adres=COALESCE(adres,'henuz adres girilmedi'),
    ssn=COALESCE(ssn,'No SSN');
    select * from insanlar;
    
  --  ================================ ORDER BY  ===================================
 --  ORDER BY cümleciði bir SORGU deyimi içerisinde belli bir SUTUN’a göre
 --  SIRALAMA yapmak için kullanýlýr.
  -- Syntax
   -------
   --   ORDER BY sutun_adi ASC   -- ARTAN
    --  ORDER BY sutun_adi DESC  -- AZALAN
--=========================================
drop table kisiler;
CREATE TABLE kisiler
    (
        ssn CHAR(9) PRIMARY KEY,
        isim VARCHAR2(50),
        soyisim VARCHAR2(50),
        maas NUMBER,
        adres VARCHAR2(50)
    );
    
    INSERT INTO kisiler VALUES(123456789, 'Ali','Can', 3000,'Istanbul');
    INSERT INTO kisiler VALUES(234567890, 'Veli','Cem', 2890,'Ankara');
    INSERT INTO kisiler VALUES(345678901, 'Mine','Bulut',4200,'Ankara');
    INSERT INTO kisiler VALUES(256789012, 'Mahmut','Bulut',3150,'Istanbul');
    INSERT INTO kisiler VALUES (344678901, 'Mine','Yasa', 5000,'Ankara');
    INSERT INTO kisiler VALUES (345458901, 'Veli','Yilmaz',7000,'Istanbul');
    SELECT * FROM kisiler;
   --ORNEK1: kisiler tablosunu adres'e göre sýralayarak sorgulayýnýz.
 select * from kisiler
 ORDER BY adres;
--maasa gore ters siralayin
select * from kisiler
ORDER BY maas DESC;
--ORNEK4: ismi Mine olanlarý, SSN'e göre AZALAN(DESC) sýrada sorgulayýnýz.
   
 select * from kisiler
 where isim='Mine'
 ORDER BY ssn DESC;
--ORNEK5: soyismi 'i Bulut olanlarý isim sýralý olarak sorgulayýnýz. 
select * from kisiler
where soyisim='Bulut'
ORDER BY isim;-- 2 de yazabilirz isim yerin 2. sutunda oldugu icin

--====================== FETCH NEXT, OFFSET (12C VE ÜSTÜ oracle larda çalýþýr, daha altsanýz çalýþmaz) ======================
--   FETCH cümleciði ile listelenecek kayýtlarý sýnýrlandýrabiliriz. Ýstersek
--   satýr sayýsýna göre istersek de toplam satýr sayýsýnýn belli bir yüzdesine
--   göre sýnýrlandýrma koymak mümkündür. (þu kadar satýrý getir)
 --  Syntax
   ---------
--   FETCH NEXT satir_sayisi ROWS ONLY;
--   FETCH NEXT satir_yuzdesi PERCENT ROWS ONLY;
--   OFFSET Cümleciði ile de listenecek olan satýrlardan sýrasýyla istediðimiz
--   kadarýný atlayabiliriz.
--  Syntax
   ----------
--   OFFSET satýr_sayisi ROWS;
--==============================================================================*/
/* ----------------------------------------------------------------------------
  ORNEK1: MAAÞ'ý en yüksek 3 kiþinin bilgilerini listeleyen sorguyu yazýnýz.*/
 
 select * from (SELECT * FROM kisiler
 ORDER BY maas DESC)
 WHERE ROWNUM <4;
 
 /*SELECT *FROM kisiler
 ORDER BY maas DESC
 FETCH NEXT 3 ROWS ONLY;*/ --bu yeni surumlerde calisiyor
 
 --ORNEK2: MAAÞ'ý en DÜÞÜK 2 kiþinin bilgilerini listeleyen sorguyu yazýnýz.
 select * from (select * from kisiler 
 ORDER BY maas)
 where rownum <3;
--ORNEK3: MAAÞ'a göre sýralamada 4. 5. ve 6. kiþilerin bilgilerini listeleyen
-- sorguyu yazýnýz.
/*select * from kisiler
order by maas desc
OFFSET 3 ROWS
FETCH NEXT 3 ROWS ONLY;*/

select * from (select * from
            (select * from kisiler
            order by maas desc)
            where rownum <=6)
where rownum <=3;


 
 
 
 
 
    